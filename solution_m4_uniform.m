%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% this m-file uses symbolic expressions for solving S(1) equilibria in the TD (four options - uniform tie breaking)
%% it is a supplementary file to the paper by Berkemer et.al on the travelers dilemma - Games and Economic Behavior
%% and refers to the comments at the end of subsection 4.2
%% (C) Rainer Berkemer - 2022-09-08 - updated 2023-05-25

clear
syms x1 x2 x3 x4 sig2 sig3

x4         =1-x1-x2-x3;
sig2       =(x1+x2);
sig3       =(x1+x2+x3);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% sampling S(1) equilibria are constituted by x_i = rhs_i , 
%  where winning probilities are on the right hand side 

rhs1 =  x1^2*sig2.^2 + (x1.^2*sig2*x3)/2  + (1-x1)*sig2.^2*sig3 + ((1-x1)*sig2*x3*sig3)/2,
rhs2 =  x2*x1*sig2*sig3 + (1-sig2)*sig3.^2 + ((1-sig2)*sig3*x4)/2,
rhs3 =  x3*x1*sig2*sig3+ (x3*(1-x1)*sig2*sig3)/2+x4,
rhs4 =  x4*sig2*sig3 + (x1.^2*sig2*x3)/2 + ((1-sig2)*sig3*x4)/2,

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% for control reasons - the right hamd sides have to sum up to unity
kontrolle = simplify(rhs1+rhs2+rhs3+rhs4)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%55
%% Solutions - with or without restrictions to simplex

% % % S = solve(x1==eval(rhs1),x2==eval(rhs2),x3==eval(rhs3));  % without restriction to the simplex
% % size(S.x1)
% % 
% % ans =
% % 
% %     21     1

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the following code line garantees restriction to the simplex
S = solve(x1==eval(rhs1),x2==eval(rhs2),x3==eval(rhs3),1-x1-x2-x3==eval(rhs4),x3>=0,x2>=0,x1>=0);         

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% control of the solution values
[S.x1,S.x2,S.x3,(1-S.x1-S.x2-S.x3)]   % print the solutions
number_solutions = size(S.x1)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Remark: 
%  for the interior equilibrium it is essential to find roots of the 20degree polynomial:

% root(z^20 - (93*z^19)/4 + (1641*z^18)/8 - (8949*z^17)/8 + 5201*z^16 - (69545*z^15)/4 
% + (418857*z^14)/8 - (1054469*z^13)/8 + (2290855*z^12)/8 - (4346473*z^11)/8 + (6255307*z^10)/8 
% - (4434213*z^9)/8 - (835699*z^8)/2 + 1558446*z^7 - 1972804*z^6 + 1508400*z^5 - 769048*z^4 
% + 267808*z^3 - 62464*z^2 + 8704*z - 512, z, 1)

%% control of the solution values

root20 = 0.15406165                  % this is a solution of the 20degree polynomial - found by Newton method

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5
%% in the following we first calculate individual terms in which this root20 is provided 
%with an exponent n and with a suitable prefactor: term_n = pre-factor-n * root20^n

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% afterwords we need only summing up these terms, i.e - see line 92
% x1_solution =  term_absolut + term2  -term3  + ... + term19

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Remark: S.x1(1) corresponds to the Nash equilibrium (x1=1)
%% following terms come from the interior solution S.x1(2)  
term19 =(308455620743860764736596535689064615899332610383612741*root20^19)/18366353080571232969732030896627706683465000067615567488;            % 2^7
term18 = (28282835715527487000296225599563591238554125525614398177*root20^18)/73465412322284931878928123586510826733860000270462269952;         % 2^9
term17 = (487612010462786583918649360122869505917135930451779465173*root20^17)/146930824644569863757856247173021653467720000540924539904;       % 2^10
term16 = (2599483161679334752283319803361903899474871098368327984909*root20^16)/146930824644569863757856247173021653467720000540924539904;      % 2^10
term15 = (2993116972997003116765657703347922239665784040835299587849*root20^15)/36732706161142465939464061793255413366930000135231134976;       % 2^8
term14 = (19464212069687090667972892147600164247810315961120455283817*root20^14)/73465412322284931878928123586510826733860000270462269952;      % 2^9
term13 = (116199309119397225819618039405144191342490536901513410222133*root20^13)/146930824644569863757856247173021653467720000540924539904;    % 2^10
term12 = (286433021130886210354697327496320721267351690199901018494813*root20^12)/146930824644569863757856247173021653467720000540924539904;    % 2^10
term11 = (610517509200433581265540044726163448279496557976152692175743*root20^11)/146930824644569863757856247173021653467720000540924539904;    % 2^10
term10 = (1135298680655638945293537710942872738214204684233928455012049*root20^10)/146930824644569863757856247173021653467720000540924539904;   % 2^10
term9 = (1546367728101040488615889871150060574764589728936643049309203*root20^9)/146930824644569863757856247173021653467720000540924539904;     % 2^10
term8 = (840828422539948132679665383901916438343397682288703514095213*root20^8)/146930824644569863757856247173021653467720000540924539904;      % 2^10
term7 = (83218499257218217070367222903088030118035308875362650705541*root20^7)/9183176540285616484866015448313853341732500033807783744;         % 2^6
term6 = (426816928077977445116514749373065543682292901170008916531673*root20^6)/18366353080571232969732030896627706683465000067615567488;       % 2^7
term5 = (14507897157624630805549414561047917695693444873588188567879*root20^5)/573948533767851030304125965519615833858281252112986484;          % 2^2
term4 = (38204469890481614204864874440492485185317975368663791699871*root20^4)/2295794135071404121216503862078463335433125008451945936;         % 2^4
term3 = (4082312078967243984712146053631294269033035420284020424863*root20^3)/573948533767851030304125965519615833858281252112986484;           % 2^2
term2 = (2282601365513943299063205299034151074189733193238888171781*root20^2)/1147897067535702060608251931039231667716562504225972968;          % 2^3
term_root = (49013658959558674515701072762014716934260074540324276775*root20/143487133441962757576031491379903958464570313028246621);
term_absolut = 3505875287368132986514602377961864759320073302157748960/143487133441962757576031491379903958464570313028246621;
test_of_terms = [term2, -term3, term4, -term5, term6, -term7, -term8, term9, -term10, term11, -term12, term13, -term14, term15, -term16, term17, -term18, term19, -term_root, term_absolut]

x1_solution = sum(test_of_terms)